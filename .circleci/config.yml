version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    
    # working_directory: ~/selenium-testng-allure-maven # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch  # ...with this image as the primary container; this is where all `steps` will run
      # - image: selenium/standalone-chrome:3.11.0
    steps: # a collection of executable commands

      - checkout # check out source code to working directory
      - setup_remote_docker

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: selenium-testng-allure-maven-{{ checksum "pom.xml" }}
      
      - run: mvn dependency:go-offline # gets the project dependencies
      
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: selenium-testng-allure-maven-{{ checksum "pom.xml" }}
      
      - run:
          name: create docker network
          command: docker network create grid
     
      - run:
          name: install selenium-hub
          command: docker run -d --rm -p 4444:4444 --net grid --name selenium-hub selenium/hub:latest
          
      - run:
          name: install selenium-node
          command: docker run -d --rm --net grid -e HUB_HOST=selenium-hub -v /dev/shm:/dev/shm selenium/node-chrome:latest
      
      - run: mvn clean verify allure:report -P grid -DsuiteXmlFile=smoke.suite.xml # run the actual tests
      
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      
      # - store_artifacts: # store the uberjar as an artifact
      # # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
      #     path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples